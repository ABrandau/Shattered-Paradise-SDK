#region Copyright & License Information
/*
 * Copyright (c) The OpenRA Developers and Contributors
 * This file is part of OpenRA, which is free software. It is made
 * available to you under the terms of the GNU General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version. For more
 * information, see COPYING.
 */
#endregion

using OpenRA.Mods.Common.Traits;
using OpenRA.Traits;

namespace OpenRA.Mods.SP.Traits
{
	[Desc("Reveal shroud generated by the `" + nameof(CreatesShroud) + "` trait, to parent actor's player in `" + nameof(HasParent) + "`.")]
	public class RevealsShroudToParentOwnerInfo : RevealsShroudInfo, Requires<HasParentInfo>
	{
		public override object Create(ActorInitializer init) { return new RevealsShroudToParentOwner(init.Self, this); }
	}

	public class RevealsShroudToParentOwner : RevealsShroud, ITick, INotifyCreated
	{
		readonly RevealsShroudToParentOwnerInfo info;
		readonly Shroud.SourceType type;
		HasParent parent;
		Player validOwner;

		public RevealsShroudToParentOwner(Actor self, RevealsShroudToParentOwnerInfo info)
			: base(info)
		{
			this.info = info;
			type = info.RevealGeneratedShroud ? Shroud.SourceType.Visibility
				: Shroud.SourceType.PassiveVisibility;
		}

		protected override void Created(Actor self)
		{
			parent = self.Trait<HasParent>();
			base.Created(self);
		}

		protected override void AddCellsToPlayerShroud(Actor self, Player p, PPos[] uv)
		{
			if (validOwner == null || !info.ValidRelationships.HasRelationship(validOwner.RelationshipWith(p)))
				return;

			p.Shroud.AddSource(this, type, uv);
		}

		void ITick.Tick(Actor self)
		{
			if (!self.IsInWorld)
				return;

			var pa = parent.Parent;

			if (validOwner == null)
			{
				if (pa != null && !pa.IsDead)
					validOwner = parent.Parent?.Owner;
			}
			else
			{
				var traitDisabled = IsTraitDisabled;
				var range = Range;

				if (cachedRange == range && traitDisabled == cachedTraitDisabled)
					return;

				cachedRange = range;
				cachedTraitDisabled = traitDisabled;

				UpdateShroudCells(self);
			}
		}

		void UpdateShroudCells(Actor self)
		{
			var cells = ProjectedCells(self);
			foreach (var p in self.World.Players)
			{
				RemoveCellsFromPlayerShroud(self, p);
				AddCellsToPlayerShroud(self, p, cells);
			}
		}
	}
}
